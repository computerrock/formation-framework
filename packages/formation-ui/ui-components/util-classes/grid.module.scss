/**
 * Grid util classes
 */
@use 'sass:list';
@use 'sass:map';

@import '../config';
@import '../functions';
@import '../mixins';

$grid-columns: map-get($dimensions, grid-columns);
$grid-column-gap: map-get($dimensions, grid-column-gap);
$grid-row-gap: map-get($dimensions, grid-row-gap);
$grid-breakpoints: map.keys($breakpoints);

// Creates modifier grid column and row classes for given $breakpoint
@mixin grid-util-modifier-classes($breakpoint: '') {
    $breakpoint-key: '';

    @if $breakpoint != '' {
        $breakpoint-key: #{$breakpoint}-;
    }

    @for $i from 1 through $grid-columns {
        // .ace-u-grid-column--[breakpoint-]-{1,i}
        :global(.ace-u-grid-column--#{$breakpoint-key}#{$i}) {
            grid-column: $i;
        }

        // .ace-u-grid-column--[breakpoint-]span-{1,i}
        :global(.ace-u-grid-column--#{$breakpoint-key}span-#{$i}) {
            grid-column: span $i;
        }

        @for $j from 1 through $grid-columns {
            // .ace-u-grid-column--[breakpoint-]-{1,i}-{1,j}
            :global(.ace-u-grid-column--#{$breakpoint-key}#{$i}-#{$j}) {
                grid-column-start: $i;
                grid-column-end: $j;
            }

            // .ace-u-grid-column--[breakpoint-]-{1,i}-span-{1,j}
            :global(.ace-u-grid-column--#{$breakpoint-key}#{$i}-span-#{$j}) {
                grid-column: $i / span $j;
            }
        }
    }

    @for $i from 1 through $grid-columns {
        // .ace-u-grid-row--[breakpoint-]-{1,i}
        :global(.ace-u-grid-row--#{$breakpoint-key}#{$i}) {
            grid-row: $i;
        }

        // .ace-u-grid-row--[breakpoint-]span-{1,i}
        :global(.ace-u-grid-row--#{$breakpoint-key}span-#{$i}) {
            grid-row: span $i;
        }

        @for $j from 1 through $grid-columns {
            // .ace-u-grid-row--[breakpoint-]-{1,i}-{1,j}
            :global(.ace-u-grid-row--#{$breakpoint-key}#{$i}-#{$j}) {
                grid-row-start: $i;
                grid-row-end: $j;
            }

            // .ace-u-grid-row--[breakpoint-]-{1,i}-span-{1,j}
            :global(.ace-u-grid-row--#{$breakpoint-key}#{$i}-span-#{$j}) {
                grid-row: $i / span $j;
            }
        }
    }
}

// Primary util classes for grid
:global(.ace-u-grid) {
    display: grid;
    grid-template-columns: repeat($grid-columns, 1fr);
    grid-column-gap: $grid-column-gap;
    grid-row-gap: $grid-row-gap;
}

:global(.ace-u-grid-column) {
    grid-column: auto;
}

:global(.ace-u-grid-row) {
    grid-row: auto;
}

// Generate non-responsive modifier util classes
@include grid-util-modifier-classes();

// Generate responsive modifier util classes
@each $breakpoint in $grid-breakpoints {
    $breakpoint-index: list.index($grid-breakpoints, $breakpoint);

    @if $breakpoint-index > 1 {
        $media-breakpoint: list.nth($grid-breakpoints, $breakpoint-index - 1);

        @include media('>=#{$media-breakpoint}') {
            @include grid-util-modifier-classes($breakpoint);
        }
    }
}
